#!/bin/sh
#description: genpass wrapper, a stateless password generator
#             look for user full name, request missing data with
#             graphical elements and integrate with system
#             clipboard.

#usage: getpass [option]... site

#example: genpass github.com
#Master password:
#4E1FQYCc.6M18R$rjl5]EO5FwkS>fVEw-KaNwROer

SCRYPT_HASH_LEN="32"
SCRYPT_CACHE_COST="20"
SCRYPT_COST="14"
SCRYPT_r="8"
SCRYPT_p="16"
DEFAULT_ENCODING="z85"
TIMEOUT="10"

_usage() {
    printf "%s\\n" "Usage: ${progname} [option]... site"
    printf "%b\\n" "Stateless password generator"
    printf "\\n"
    printf "%s\\n" "  -n, --name \"Full Name\"    name"
    printf "%s\\n" "  -p, --password \"Secret\"   master password"
    printf "%s\\n" "  -r, --registration-mode   ask twice for master password"
    printf "%s\\n" "  -f, --file FILE           use|write cache key from|to FILE"
    printf "%s\\n" "  -l, --key-length 8-1024   key length in bytes, \"${SCRYPT_HASH_LEN}\" by default"
    printf "%s\\n" "  -C, --cache-cost 1-30     cpu/memory cost for cache key, \"${SCRYPT_CACHE_COST}\" by default"
    printf "%s\\n" "  -c, --cost 1-30           cpu/memory cost for final key, \"${SCRYPT_COST}\" by default"
    printf "%s\\n" "  --scrypt-r 1-9999         block size, \"${SCRYPT_r}\" by default (advanced)"
    printf "%s\\n" "  --scrypt-p 1-99999        parallelization, \"${SCRYPT_p}\" by default (advanced)"
    printf "%s\\n" "  -N, --dry-run             perform a trial run with no changes made"
    printf "%s\\n" "  -e, --encoding ENCODING   password encoding output, \"${DEFAULT_ENCODING}\" by default"
    printf "%s\\n" "                              ENCODING: dec|hex|base64|z85|skey"
    printf "%s\\n" "  -1, --single              use single function derivation"
    printf "%s\\n" "  -k, --kill-after SEC      kill clipboard after N seconds, \"${TIMEOUT}\" by default, 0 to disable"
    printf "%s\\n" "  -v, --verbose             verbose mode"
    printf "%s\\n" "  -V, --version             show version and exit"
    printf "%s\\n" "  -h, --help                show this help message and exit"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_notify() {
    #output messages through the notification system
    [ -z "${1}" ] && return 1
    _notify__msg="${1}"; _notify__passwd="${2}" _notify__clipboard_msg="${3}"

    case "${_notify__clipboard_msg}" in
        *clipboard*)
            if command -v "xclip" >/dev/null 2>&1; then
                _notify__clipboard_cmd="xclip -selection clipboard"
            elif command -v "xsel" >/dev/null 2>&1; then
                _notify__clipboard_cmd="xsel -bi"
            elif command -v "pbcopy" >/dev/null 2>&1; then
                _notify__clipboard_cmd="pbcopy"
            else
                _notify__clipboard_msg="Install 'xclip', 'xsel' or 'pbcopy' to copy to clipboard"
            fi
            [ -z "${_notify__clipboard_cmd}" ] || \
                _daemonize_clipboard "${_notify__clipboard_cmd}" "${_notify__passwd}"
    esac; sleep 0.05 || sleep 1 #give some time to launch xclip|xsel|pbcopy, etc
    #some sleep implementation don't support fractions of seconds

    [ -z "$(ps acx | awk '/xclip|xsel|pbcopy/ {print $1}')" ] && \
        _notify__clipboard_msg="Couldn't copy to clipboard"

    kill -9 $(pgrep notify-osd) >/dev/null 2>&1
    if ! DISPLAY=${DISPLAY:-:0} notify-send -t 1000 "${_notify__msg}" "${_notify__clipboard_msg}"; then
        if command -v "gxmessage" 2>/dev/null; then
            font="Monaco 9"
            DISPLAY=${DISPLAY:-:0} gxmessage "${font:+-fn "$font"}" "${_notify__msg}:${_notify__clipboard_msg}" "ok"
        elif command -v "xmessage" 2>/dev/null; then
            font="fixed"
            DISPLAY=${DISPLAY:-:0} xmessage "${font:+-fn "$font"}" "${_notify__msg}:${_notify__clipboard_msg}" "ok"
        fi
    fi
}

_is_int() {
    #look for an integer, returns 0 on success, 1 otherwise
    #http://www.unix.com/shell-programming-and-scripting/172070-help-scripting-command.html
    case "${1}" in
        *[!0-9]*|"") return 1 ;;
    esac
}

_basename() {
    #portable basename
    [ -z "${1}" ] && return 1 || _basename__name="${1}" && _basename__retval=""
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="${_basename__name##*/}"
    esac
    [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ] && \
        _basename__name="${_basename__name%$_basename__suffix}"
    _basename__retval="${_basename__name}"
}

_get_terminal_vars() {
    if [ -z "${default_terminal}" ]; then
        default_terminal="$(minos-config m-terminal 2>/dev/null)"
        if ! command -v "${default_terminal}" >/dev/null 2>&1; then
            if command -v "x-terminal-emulator" >/dev/null 2>&1; then
                default_terminal="x-terminal-emulator"
            else
                terminal_emulators="urxvt rxvt gnome-terminal konsole xterm"
                for terminal_emulator in ${terminal_emulators}; do
                    if command -v "${terminal_emulator}" >/dev/null 2>&1; then
                        default_terminal="${terminal_emulator}"
                        break
                    fi
                done
                [ -z "${default_terminal}" ] && default_terminal="xterm"
            fi
        fi
    fi
    [ -z "${SHELL}" ] && SHELL="sh" || :
}

_daemonize_clipboard() {
    #http://blog.n01se.net/blog-n01se-net-p-145.html
    [ -z "${1}" ] && return 1
    (   # 1. fork, to guarantee the child is not a process
        # group leader, necessary for setsid) and have the
        # parent exit (to allow control to return to the shell)

        # 2. redirect stdin/stdout/stderr before running child
        [ -t 0 ] && exec  </dev/null
        [ -t 1 ] && exec  >/dev/null
        [ -t 2 ] && exec 2>/dev/null
        if ! command -v "setsid" >/dev/null 2>&1; then
            # 2.1 guard against HUP and INT (in child)
            trap '' 1 2
        fi

        # 3. ensure cwd isn't a mounted fs so it does't block
        # umount invocations
        cd /

        # 4. umask (leave this to caller)
        # umask 0

        # 5. close unneeded fds
        #XCU 2.7 Redirection says: open files are represented by
        #decimal numbers starting with zero. The largest possible
        #value is implementation-defined; however, all
        #implementations shall support at least 0 to 9, inclusive,
        #for use by the application.
        i=3; while [ "${i}" -le "9" ]; do
            eval "exec ${i}>&-"
            i="$(($i + 1))"
        done

        # 6. create new session, so the child has no
        # controlling terminal, this prevents the child from
        # accesing a terminal (using /dev/tty) and getting
        # signals from the controlling terminal (e.g. HUP, INT)
        if command -v "setsid" >/dev/null 2>&1; then
            exec printf "%s" "${2}" 2>/dev/null | DISPLAY=${DISPLAY:-:0} setsid ${1}
        elif command -v "nohup" >/dev/null 2>&1; then
            exec printf "%s" "${2}" 2>/dev/null | DISPLAY=${DISPLAY:-:0} nohup ${1} >/dev/null 2>&1
        else
            if [ ! -f "${1}" ]; then
                "$@"
            else
                exec "$@"
            fi
        fi
    ) &

    # 2.2 guard against HUP (in parent)
    if ! command -v "setsid" >/dev/null 2>&1 && \
       ! command -v "nohup" >/dev/null 2>&1; then
        disown -h "${!}"
    fi
}

_daemonize() {
    [ -z "${1}" ] && return 1
    (   [ -t 0  ] && exec  </dev/null
        [ -t 1  ] && exec  >/dev/null
        [ -t 2  ] && exec 2>/dev/null
        command -v "setsid" >/dev/null 2>&1 || trap '' 1 2
        cd /; i=3; while [ "${i}" -le "9" ]; do
            eval "exec ${i}>&-"; i="$(($i + 1))"
        done
        if command -v "setsid" >/dev/null 2>&1; then
            exec setsid "$@"
        elif command -v "nohup" >/dev/null 2>&1; then
            exec nohup "$@" >/dev/null 2>&1
        else
            [ -f "${1}" ] && exec "$@" || "$@"
        fi
    ) &
    if ! command -v "setsid" >/dev/null 2>&1 \ &&
       ! command -v "nohup"  >/dev/null 2>&1; then
        disown -h "${!}"
    fi
}

_kill_clipboard_after() {
    _kill__script="${HOME}/.${progname}-kill-clipboard"
    _kill_script() {
        printf "%s\\n" "#!/bin/sh"
        printf "%s\\n" "#autogenerated by ${progname}: $(date +%d-%m-%Y:%H:%M)"
        printf "%s\\n" "PID=\"\${\$}\""
        printf "%s\\n" "ps ax | awk '/\/bin\/sh.*-kill-clipboard$/ {if (\$1 !~ \"'\$PID'\") print \$1}' | xargs kill -9 2>/dev/null"
        printf "%s\\n" "sleep ${1}"
        printf "%s\\n" "ps acx | awk '/xclip|xsel|pbcopy/ {print \$1}' | xargs kill -9 2>/dev/null"
        printf "%s\\n" "rm -rf \"${_kill__script}\""
    }
    _kill_script "${1}" > "${_kill__script}" && chmod +x "${_kill__script}"
    _daemonize /bin/sh "${_kill__script}"
}

_basename "${0}"; progname="${_basename__retval}"

if [ ! -t 0 ]; then
    #add input comming from pipe or file to $@
    set -- "${@}" $(cat)
fi

if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
    #if getpass is executed from a gui menu, launch a terminal emulator to
    #retrieve the missing parameters (specially the master password)
    _get_terminal_vars
    exec "${default_terminal}" -title "${progname}" -e "${SHELL}" \
        -c "${0} ${*} || { printf \"\\n%s\" 'Press [enter] to continue... '; read junk; }"
    #a prettier option (although potentially more dangerous) could be to
    #retrieve the missing parameters with a password|input dialog and invoke
    #genpass afterwards, eg.
    #passwd="$(printf "%s\\n%s\\n%s\\n%s\\n" \
        #"SETTITLE Getpass"                  \
        #"SETDESC %20%20Master password:"    \
        #"SETPROMPT"                         \
        #"GETPIN"                            \
    #| pinentry-x11 2>/dev/null | awk '/^D / {sub(/^D /,""); print; exit}')"
fi

[ "${#}" -eq "0" ] && _usage >&2 && exit 1

for arg; do #parse options
    #isn't pretty to parse arguments in shell scripts
    [ "${skip_arg}" = 1 ] && skip_arg="" && continue
    case "${arg}" in
        -h|--help) _usage "${arg}" && exit 0 ;;
        -V|--version) exec genpass -V ;;
        '-n'|'--name')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "genpass: option '${arg}' requires an argument" ;;
                esac
                shift; name="${1}"; [ "${1}" ] && shift && skip_arg="1"
            else
                printf "%s\\n" "genpass: option '${arg}' requires an argument" >&2
                genpass -h >&2 && exit 1
            fi ;;
        -n*)     name="${1#-n}"; shift ;;
        --name*) name="${1#--name}"; shift ;;
        '-k'|'--kill-after')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; seconds="${1}"; [ "${1}" ] && shift && skip_arg="1"
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -k*)           seconds="${1#-k}"; shift ;;
        --kill-after*) seconds="${1#--kill-after}"; shift ;;
        *) parameters="${parameters}|${arg}"; shift ;;
    #_compress__files_format="$(printf "%s" "${_compress__files}" | sed 's:|: :g')"
    #OLDIFS="${IFS}"
    #IFS="|"
    esac
done; parameters="${parameters#|}"

if ! command -v "genpass" >/dev/null 2>&1; then
    printf "%s\\n" "install 'genpass' to run this program" >&2 && exit 1
fi

#TODO 01-01-2016 14:50 >> find out more ways to get full names
[ -z "${name}" ] && name="$(git config --list 2>/dev/null | awk -F= '/user.name/ {print $2}')"

[ -z "${seconds}" ]      && seconds="${TIMEOUT}" || {
    _is_int "${seconds}" || seconds="${TIMEOUT}"
}

OLDIFS="${IFS}"; IFS="|"
if [ -z "${name}" ]; then
    passwd="$(genpass ${parameters})"
else
    passwd="$(genpass -n "${name}" ${parameters})"
fi
IFS="${OLDIFS}"

if [ "$(printf "%s" "${passwd}"|awk 'END {print NR}')" = "1" ];then
    clipboard_text="Copied to clipboard!"
else
    error_msg="${passwd}"; printf "%s" "${error_msg}" >&2 && exit 1
fi

_notify "Static password" "${passwd}" "${clipboard_text}"; unset passwd
[ X"${seconds}" = X"0" ] && exit || :
_kill_clipboard_after "${seconds}"
